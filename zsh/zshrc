# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=/Users/ioanniskarasavvaidis/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="robbyrussell" # "comfucios"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(wakatime zsh-local-ai git git-lfs jsontools last-working-dir branch brew command-not-found docker docker-compose github gitignore git-prompt golang kubectl history history-substring-search node npm nvm macos rvm rsync ruby ssh-agent tmux vscode yarn zsh-autosuggestions)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
 if [[ -n $SSH_CONNECTION ]]; then
   export EDITOR='vim'
 else
   export EDITOR='nvim'
 fi


bindkey '^X' create_completion

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

TZ="Europe/London"
HISTFILE=$HOME/.zhistory
HISTSIZE=20000
SAVEHIST=20000
setopt HIST_IGNORE_SPACE
HOSTNAME="`hostname`"
PAGER='less'

LC_ALL='en_US.UTF-8'

export NVM_DIR="$HOME/opt/bin/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

# from https://github.com/creationix/nvm#deeper-shell-integration
# place this after nvm initialization!
autoload -U add-zsh-hook
load-nvmrc() {
  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  elif [ "$node_version" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}
add-zsh-hook chpwd load-nvmrc
load-nvmrc

#export GOPATH=~/go

alias hgrep="history | grep -i"

# git aliases
alias gl="git log --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset\" --abbrev-commit"
alias gprm="git pull --rebase upstream master"
function gpr {
  git pull --rebase $1 $2
}


# npm
alias n="node"
alias nci="npm ci"
alias ni="npm install"
alias nis="npm install --save"
alias nisd="npm install --save-dev"
alias nig="npm install -g"
alias nl="npm link"
alias nr="npm run"
alias nt="npm test"
alias ns="npm start"

# vim diff
function vimdiff { vim -p $(git diff --name-only) -c 'tabdo VCSVimDiff'}

# highlight pasting
# https://gist.github.com/jimbojsb/1630790
alias jshigh="pbpaste | highlight --syntax=js -O rtf | pbcopy"

cd () {
  builtin cd "$*"
  ls
}

function ck { command mkdir $1 && cd $1 }

get_suspended_jobs() {
  # thanks to @mheap for his help
  NUM_JOBS="`jobs | wc -l`"
  if test $NUM_JOBS -lt 1 ; then
    echo ""
  else
    echo "("`jobs | gsed -r 's/ .*suspended (\(signal\))?//' | tr -s ' ' | gsed 's/\[\([^]]*\)\]/\1:/g' | gsed 's/\: /\:/g'`")"
  fi
}


function git-new-remote-tracking {
  git checkout -b $1 && git push -u origin $1
}

function git-nuke {
  git branch -D $1 && git push origin :$1
}

compdef _git git-nuke=git-checkout

function nvm_prompt_info() {
  local node_version
  node_version=$(nvm current 2> /dev/null) || return
  echo "‹$node_version›"
}

gshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

youtube-audio() {
  youtube-dl -f bestaudio --audio-quality 0 --audio-format mp3 -i --extract-audio  --prefer-ffmpeg $1
}

export GOPATH=~/go
export PATH="/usr/local/bin:$GOPATH/bin:$PATH"
export PATH="/usr/local/sbin:$PATH"
export PATH="/usr/local/opt/ruby/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"

export PATH="/usr/local/opt/mysql-client/bin:$PATH"

export LIBRARY_PATH="$LIBRARY_PATH:/usr/local/opt/openssl/lib/"

#PATH="/usr/local/opt/openssl@1.1/bin:$PATH"
#LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"
#CPPFLAGS="-I/usr/local/opt/openssl@1.1/include"
#PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig"

#export DOCKER_BUILDKIT=1


knownhosts () {
  cp ~/.ssh/known_hosts ~/.ssh/known_hosts_$(date +%Y%m%d-%H%M%S) ;
  sed -e "$1d" ~/.ssh/known_hosts > ~/.ssh/known_hosts_new ;
  mv ~/.ssh/known_hosts_new ~/.ssh/known_hosts ;
  chmod 644 ~/.ssh/known_hosts
}

source "/usr/local/opt/kube-ps1/share/kube-ps1.sh"
#source "/opt/homebrew/Cellar/kube-ps1/0.7.0/share/kube-ps1.sh"
RPS1=' $(kube_ps1)'

#source /Users/ioannis.karasavvaidis/.gvm/scripts/gvm
# krew path
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

source /usr/local/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh
#source "/opt/homebrew/Cellar/zsh-vi-mode/0.8.5/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh"
#ZVM_VI_INSERT_ESCAPE_BINDKEY=ne
ZVM_VI_EDITOR=nvim

 if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi
export PATH="/usr/local/opt/php@7.4/bin:$PATH"
export PATH="/usr/local/opt/php@7.4/sbin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

eval "$(fzf --zsh)"

eval "$(zoxide init zsh --cmd cd)"

# AUTOCOMPLETION

# initialize autocompletion
autoload -U compinit
compinit

# history setup
setopt APPEND_HISTORY
setopt SHARE_HISTORY
HISTFILE=$HOME/.zhistory
SAVEHIST=1000
HISTSIZE=999
setopt HIST_EXPIRE_DUPS_FIRST
setopt EXTENDED_HISTORY

# autocompletion using arrow keys (based on history)
bindkey '\e[A' history-search-backward
bindkey '\e[B' history-search-forward

# GENERAL

# (bonus: Disable sound errors in Zsh)

# never beep
setopt NO_BEEP

source $HOME/.oh-my-zsh/custom/plugins/zsh-histdb/sqlite-history.zsh
autoload -Uz add-zsh-hook
#add-zsh-hook precmd histdb-update-outcome

# Query to pull in the most recent command if anything was found similar
# in that directory. Otherwise pull in the most recent command used anywhere
# Give back the command that was used most recently
_zsh_autosuggest_strategy_histdb_top_fallback() {
    local query="
    select commands.argv from
    history left join commands on history.command_id = commands.rowid
    left join places on history.place_id = places.rowid
    where places.dir LIKE
        case when exists(select commands.argv from history
        left join commands on history.command_id = commands.rowid
        left join places on history.place_id = places.rowid
        where places.dir LIKE '$(sql_escape $PWD)%'
        AND commands.argv LIKE '$(sql_escape $1)%')
            then '$(sql_escape $PWD)%'
            else '%'
            end
    and commands.argv LIKE '$(sql_escape $1)%'
    group by commands.argv
    order by places.dir LIKE '$(sql_escape $PWD)%' desc,
        history.start_time desc
    limit 1"
    suggestion=$(_histdb_query "$query")
}

ZSH_AUTOSUGGEST_STRATEGY=histdb_top_fallback

show_local_history() {
    limit="${1:-10}"
    local query="
        select history.start_time, commands.argv
        from history left join commands on history.command_id = commands.rowid
        left join places on history.place_id = places.rowid
        where places.dir LIKE '$(sql_escape $PWD)%'
        order by history.start_time desc
        limit $limit
    "
    results=$(_histdb_query "$query")
    echo "$results"
}
# Grep
search_local_history() {
    show_local_history 100 | grep "$1"
}


# The next line updates PATH for the Google Cloud SDK.
#if [ -f '/Users/ioannis.karasavvaidis/Downloads/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/ioannis.karasavvaidis/Downloads/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
#if [ -f '/Users/ioannis.karasavvaidis/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/ioannis.karasavvaidis/Downloads/google-cloud-sdk/completion.zsh.inc'; fi


eval "$(rbenv init - zsh)"

# PATH="/usr/local/opt/openssl@1.1/bin:$PATH"
# LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"
# CPPFLAGS="-I/usr/local/opt/openssl@1.1/include"
# PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig"

#export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"


# PATH="/usr/local/opt/openssl@1.1/bin:$PATH"
# LDFLAGS="-L/usr/local/opt/openssl@1.1/lib"
# CPPFLAGS="-I/usr/local/opt/openssl@1.1/include"
# PKG_CONFIG_PATH="/usr/local/opt/openssl@1.1/lib/pkgconfig"

#. /opt/homebrew/opt/asdf/libexec/asdf.sh

export DEV_ROOT=~/apps/
#export PATH=/Users/ioannis.karasavvaidis/.meteor:$PATH
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
[ "$TERM" = "xterm-kitty" ] && alias ssh="kitty +kitten ssh"

# # >>> conda initialize >>>
# # !! Contents within this block are managed by 'conda init' !!
# __conda_setup="$('/Users/ioanniskarasavvaidis/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
# if [ $? -eq 0 ]; then
#     eval "$__conda_setup"
# else
#     if [ -f "/Users/ioanniskarasavvaidis/miniconda3/etc/profile.d/conda.sh" ]; then
#         . "/Users/ioanniskarasavvaidis/miniconda3/etc/profile.d/conda.sh"
#     else
#         export PATH="/Users/ioanniskarasavvaidis/miniconda3/bin:$PATH"
#     fi
# fi
# unset __conda_setup
# # <<< conda initialize <<<


PATH="/Users/ioanniskarasavvaidis/perl5/bin${PATH:+:${PATH}}"; export PATH;
PERL5LIB="/Users/ioanniskarasavvaidis/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="/Users/ioanniskarasavvaidis/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"/Users/ioanniskarasavvaidis/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/Users/ioanniskarasavvaidis/perl5"; export PERL_MM_OPT;

PATH=~/.console-ninja/.bin:$PATH
[[ -s "/Users/ioanniskarasavvaidis/.gvm/scripts/gvm" ]] && source "/Users/ioanniskarasavvaidis/.gvm/scripts/gvm"
